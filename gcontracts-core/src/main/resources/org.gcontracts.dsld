import org.codehaus.groovy.ast.ClassHelper;
import org.codehaus.groovy.ast.ClassNode;
import org.codehaus.groovy.ast.MethodNode;
import org.codehaus.groovy.ast.Parameter;

/**
 * @author Andre Steingress
 */
contribute(bind(closure: enclosingClosure()) & bind(method: enclosingMethod(annotatedBy('org.gcontracts.annotations.Ensures')))) {
	property name : 'old', doc: 'java.util.Map of all property values before the method call.', provider: 'org.gcontracts', type : java.util.Map

	if (method.isEmpty()) return

	MethodNode methodNode = method.first()
	ClassNode returnType = methodNode.returnType
	if (returnType == ClassHelper.VOID_TYPE) return

	property name : 'result', doc: 'The return value of this method.', provider: 'org.gcontracts', type : returnType

	for (Parameter parameter : methodNode.parameters)  {
		property name : parameter.name, provider: 'org.gcontracts', type : parameter.type
	}
}

contribute(bind(closure: enclosingClosure()) & bind(method: enclosingMethod(annotatedBy('org.gcontracts.annotations.Requires')))) {
	if (method.isEmpty()) return

	MethodNode methodNode = method.first()
	for (Parameter parameter : methodNode.parameters)  {
		property name : parameter.name, provider: 'org.gcontracts', type : parameter.type
	}
}

contribute(bind(closure: enclosingClosure()) & bind(clazz: enclosingClass(annotatedBy('org.gcontracts.annotations.Invariant')))) {
	if (clazz.isEmpty()) return

	ClassNode classNode = clazz.first()
	for (PropertyNode property : classNode.properties)  {
		property name : property.name, provider: 'org.gcontracts', type : property.type
	}
}