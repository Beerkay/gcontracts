{"name":"GContracts","tagline":"Design by Contract Library for Groovy","body":"### Programming by Contract for Groovy\r\n\r\nThis project aims to provide contract annotations that support the specification of class-invariants, pre- and post-conditions on Groovy classes and interfaces. \r\n\r\nIn addition, GContracts supports postconditions with the <code>old</code> and <code>result</code> variable and _inheritance_ of all assertion types.\r\n\r\n```groovy\r\nimport org.gcontracts.annotations.*\r\n\r\n@Invariant({ speed() >= 0 })\r\nclass Rocket { \r\n    \r\n    @Requires({ isStarted() })\r\n    @Ensures({ old.speed < speed })\r\n    def accelerate() { ... }\r\n\r\n    boolean isStarted() { ... } \r\n    def speed() { ... }\r\n}\r\n```\r\n\r\nGContracts comes as _single JAR file_, without any third-party dependencies.\r\n\r\n### More Features\r\n\r\n* definition of class invariants, pre- and post-conditions via <code>@Invariant</code>, <code>@Requires</code> and <code>@Ensures</code>\r\n* inheritance of class invariants, pre- and post-conditions of concrete predecessor classes\r\n* inheritance of class invariants, pre- and post-conditions in implemented interfaces\r\n* usage of <tt>old</tt> and <tt>result</tt> variable in post-condition assertions\r\n* custom implementation of the <code>Groovydoc</code> Ant task to generate Javadocs with contract information\r\n* assertion injection in Plain Old Groovy Objects (POGOs)\r\n* human-readable assertion messages, based on Groovy power asserts\r\n* enabling contracts at package- or class-level with <tt>@AssertionsEnabled</tt>\r\n* enable or disable contract checking with Java's <code>-ea</code> and <code>-da</code> VM parameters\r\n* detection of circular assertion method calls\r\n* multi-module Gradle projcet\r\n\r\nIf you want to know about more about some of these features, <a href=\"https://github.com/andresteingress/gcontracts/wiki/_pages\">checkout the Wiki pages</a>.\r\n\r\n### The Stack Example\r\n\r\nThe <code>Stack</code> example is a classic way demonstrating the power of contracts in class libraries. Here is a Groovy example leveraging the GContracts library:\r\n\r\n```groovy\r\n@Grab(group='org.gcontracts', module='gcontracts-core', version='[1.2.12,)')\r\nimport org.gcontracts.annotations.*\r\n\r\n@Invariant({ elements != null })\r\nclass Stack<T> {\r\n\r\n    List<T> elements\r\n\r\n    @Ensures({ is_empty() })\r\n    def Stack()  {\r\n        elements = []\r\n    }\r\n\r\n    @Requires({ preElements?.size() > 0 })\r\n    @Ensures({ !is_empty() })\r\n    def Stack(List<T> preElements)  {\r\n        elements = preElements\r\n    }\r\n\r\n    boolean is_empty()  {\r\n        return elements.isEmpty()\r\n    }\r\n\r\n    @Requires({ !is_empty() })\r\n    T last_item()  {\r\n        return elements.get(count() - 1)\r\n    }\r\n\r\n    def count() {\r\n        return elements.size()\r\n    }\r\n\r\n    @Ensures({ result == true ? count() > 0 : count() >= 0  })\r\n    boolean has(T item)  {\r\n        return elements.contains(item)\r\n    }\r\n\r\n    @Ensures({ last_item() == item })\r\n    def push(T item)  {\r\n       return elements.add(item)\r\n    }\r\n\r\n    @Requires({ !is_empty() })\r\n    @Ensures({ last_item() == item })\r\n    def replace(T item)  {\r\n        remove()\r\n        return elements.add(item)\r\n    }\r\n\r\n    @Requires({ !is_empty() })\r\n    @Ensures({ result != null })\r\n    T remove()  {\r\n        return elements.remove(count() - 1)\r\n    }\r\n\r\n    String toString() { elements.toString() }\r\n}\r\n\r\ndef stack = new Stack<Integer>()\r\n```\r\n\r\nYou can copy and paste the above example to your <code>groovyConsole</code> and hit the run button.\r\n\r\n### Installation/Requirements\r\n\r\nGContracts is available at the [central Maven repository](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22gcontracts-core%22) and as [binary download at Github](https://github.com/andresteingress/gcontracts/downloads). Add <code>gcontracts-core-xxx.jar</code> to your project's classpath and you're ready to go.\r\n\r\nAs of 1.2.11, GContracts comes with embedded support for the Groovy/Grails tool suite >= 3.2.0 (Eclipse) and IntelliJ >= 12.1.\r\n\r\nThe library runs with Groovy >= 1.8 and can be used in statically (with @CompileStatic) and dynamically typed code.","google":"UA-39336540-1","note":"Don't delete this file! It's used internally to help with page regeneration."}